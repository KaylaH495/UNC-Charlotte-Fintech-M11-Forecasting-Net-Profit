# -*- coding: utf-8 -*-
"""UNC Charlotte Fintech M11 Forecasting Net Profit

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MTAINmBAXbnpfLpDGo8gCUfr6APjC5NK
"""

!pip install pystan
!pip install prophet
!pip install hvplot==0.8.4
!pip install holoviews==1.16.2
!pip install bokeh==3.2.0

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import holoviews as hv
from prophet import Prophet
import hvplot.pandas
import datetime as dt
# %matplotlib inline

from google.colab import files
uploaded = files.upload()

df_mercado_trends = pd.read_csv("google_hourly_search_trends.csv")

display(df_mercado_trends.head(5))
display(df_mercado_trends.tail(5))

# Review the data types of the DataFrame using the info function
df_mercado_trends.info()

# Holoviews extension to render hvPlots in Colab
hv.extension('bokeh')

# Slice the DataFrame to just the month of May 2020
df_mercado_trends['Date'] = pd.to_datetime(df_mercado_trends['Date'])
df_mercado_trends = df_mercado_trends.set_index('Date')

df_may_2020 = df_mercado_trends.loc['2020-05-01':'2020-05-31']

# Use hvPlot to visualize the data for May 2020
df_may_2020.hvplot.line(title='Google Search Trends in May 2020')

# Calculate the sum of the total search traffic for May 2020
traffic_may_2020 = df_may_2020['Search Trends'].sum()

# View the traffic_may_2020 value
print(f'The sum of the total search traffic for May 2020 is {traffic_may_2020:.2f}')

# Calcluate the monhtly median search traffic across all months
# Group the DataFrame by index year and then index month, chain the sum and then the median functions

# Group the dataframe by index year and then index month
df_grouped = df_mercado_trends.groupby([df_mercado_trends.index.year, df_mercado_trends.index.month])

# Chain the sum and then the median functions
median_monthly_traffic = df_grouped['Search Trends'].sum().median()

# View the median_monthly_traffic value
print(f'The monthly median search traffic across all months is {median_monthly_traffic:.2f}')

# Compare the seach traffic for the month of May 2020 to the overall monthly median value
# Calculate the percentage difference between the two values
percentage_difference = (traffic_may_2020 - median_monthly_traffic) / median_monthly_traffic * 100

# Print the result
print(f'The search traffic for the month of May 2020 is {percentage_difference:.2f}% different from the overall monthly median value')

# Holoviews extension to render hvPlots in Colab
hv.extension('bokeh')

# Group the hourly search data to plot (use hvPlot) the average traffic by the day of week
#Create a dataframe from the google_hourly_search_trends csv file
google_hr_search_trends = pd.read_csv('google_hourly_search_trends.csv')

#convert the Date column to datetime
google_hr_search_trends['Date'] = pd.to_datetime(google_hr_search_trends['Date'])

#Set the date columns as the index.
google_hr_search_trends = google_hr_search_trends.set_index('Date')

# Group the dataframe by the day of the week using index.dayofweek and calculate the mean of the search traffic
df_dayofweek = google_hr_search_trends.groupby(google_hr_search_trends.index.dayofweek)['Search Trends'].mean()

# Rename the index to match the names of the days of the week
df_dayofweek.index = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
display(df_dayofweek)

# Holoviews extension to render hvPlots in Colab
hv.extension('bokeh')

# Use hvPlot to visualize the hour of the day and day of week search traffic as a heatmap.

# Group the dataframe by the hour and the day of the week using index.hour and index.dayofweek and calculate the mean of the search traffic
df_hour_dayofweek = google_hr_search_trends.groupby([google_hr_search_trends.index.hour, google_hr_search_trends.index.dayofweek])['Search Trends'].mean()

# Unstack the dataframe to create a matrix-like structure
df_hour_dayofweek = df_hour_dayofweek.unstack(level=1)

# Rename the columns to match the names of the days of the week
df_hour_dayofweek.columns = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

# Plot a heatmap using hvplot
df_hour_dayofweek.hvplot.heatmap(title=" Google Hourly Search traffic as a heatmap", C='Search Trends', cmap='viridis')

# Holoviews extension to render hvPlots in Colab
hv.extension('bokeh')

# Group the hourly search data to plot (use hvPlot) the average traffic by the week of the year

# Group the dataframe by the week of the year using index.week and calculate the mean of the search traffic
df_week = google_hr_search_trends.groupby(google_hr_search_trends.index.isocalendar().week)['Search Trends'].mean()

# Plot a line chart using hvplot
df_week.hvplot.line(x='week', y='Search Trends')

# Upload the "mercado_stock_price.csv" file into Colab, then store in a Pandas DataFrame
# Set the "date" column as the Datetime Index.

from google.colab import files
uploaded = files.upload()

df_mercado_stock = pd.read_csv("mercado_stock_price.csv")
df_mercado_stock['date'] = pd.to_datetime(df_mercado_stock['date'])
df_mercado_stock = df_mercado_stock.set_index('date')

# View the first and last five rows of the DataFrame
display(df_mercado_stock.head(5))
display(df_mercado_stock.tail(5))

# Holoviews extension to render hvPlots in Colab
hv.extension('bokeh')

# Use hvPlot to visualize the closing price of the df_mercado_stock DataFrame
df_mercado_stock.hvplot.line(x='date', y='close', title='Mercado Stock Price')

# Concatenate the df_mercado_stock DataFrame with the df_mercado_trends DataFrame
# Concatenate the DataFrame by columns (axis=1), and drop and rows with only one column of data

mercado_stock_trends_df = pd.concat([df_mercado_trends, df_mercado_stock], axis=1)
mercado_stock_trends_df = mercado_stock_trends_df.dropna(axis=0)

# The index is now of dtype object, Let reconvert to datetime dtype.
mercado_stock_trends_df['date'] = pd.to_datetime(mercado_stock_trends_df.index)
mercado_stock_trends_df = mercado_stock_trends_df.set_index('date')

# View the first and last five rows of the DataFrame
display(mercado_stock_trends_df.head(5))
display(mercado_stock_trends_df.tail(5))

# For the combined dataframe, slice to just the first half of 2020 (2020-01 through 2020-06)
first_half_2020 = mercado_stock_trends_df.loc['2020-01':'2020-06']

# View the first and last five rows of first_half_2020 DataFrame
display(first_half_2020.head())
display(first_half_2020.tail())

# Holoviews extension to render hvPlots in Colab
hv.extension('bokeh')

# Use hvPlot to visualize the close and Search Trends data
# Plot each column on a separate axes using the following syntax
# `hvplot(shared_axes=False, subplots=True).cols(1)`

first_half_2020.hvplot.line(x='date', y=['Search Trends', 'close'], subplots=True, shared_axes=False).cols(1)



# Create a new column in the mercado_stock_trends_df DataFrame called Lagged Search Trends
# This column should shift the Search Trends information by one hour
mercado_stock_trends_df['Lagged Search Trends'] = mercado_stock_trends_df['Search Trends'].shift()

# Create a new column in the mercado_stock_trends_df DataFrame called Stock Volatility
# This column should calculate the standard deviation of the closing stock price return data over a 4 period rolling window
mercado_stock_trends_df['Stock Volatility'] = mercado_stock_trends_df['close'].ewm(span=4).std()
mercado_stock_trends_df

# Holoviews extension to render hvPlots in Colab
hv.extension('bokeh')

# Use hvPlot to visualize the stock volatility
mercado_stock_trends_df.hvplot.line(x='date',y='Stock Volatility',title='Stock Market Volatility')

# Create a new column in the mercado_stock_trends_df DataFrame called Hourly Stock Return
# This column should calculate hourly return percentage of the closing price
mercado_stock_trends_df['Hourly Stock Return'] = mercado_stock_trends_df['close'].pct_change()

# View the first and last five rows of the mercado_stock_trends_df DataFrame
display(mercado_stock_trends_df.head(5))
display(mercado_stock_trends_df.tail(5))

# Construct correlation table of Stock Volatility, Lagged Search Trends, and Hourly Stock Return
# Review the time series correlation using hvplot
corr_table = mercado_stock_trends_df[['Stock Volatility', 'Lagged Search Trends', 'Hourly Stock Return']].corr()
display(mercado_stock_trends_df[['Lagged Search Trends', 'Stock Volatility', 'Hourly Stock Return']].hvplot.line(x='date', subplots=True, shared_axes=False).cols(1)
)
# Display the correlation table
display(corr_table)

# Using the df_mercado_trends DataFrame, reset the index so the date information is no longer the index
mercado_prophet_df = df_mercado_trends.reset_index()

# Label the columns ds and y so that the syntax is recognized by Prophet
mercado_prophet_df.columns = ['ds', 'y']

# Drop an NaN values from the prophet_df DataFrame
mercado_prophet_df= mercado_prophet_df.dropna()

# View the first and last five rows of the mercado_prophet_df DataFrame
display(mercado_prophet_df.head(5))
display(mercado_prophet_df.tail(5))

# Call the Prophet function, store as an object
model_mercado_trends = Prophet()

# Fit the time-series model.
model_mercado_trends.fit(mercado_prophet_df)

# Create a future dataframe to hold predictions
# Make the prediction go out as far as 2000 hours (approx 80 days)
future_mercado_trends =  model_mercado_trends.make_future_dataframe(periods=80, freq='H')

# View the last five rows of the future_mercado_trends DataFrame
display(future_mercado_trends.tail(5))

# Make the predictions for the trend data using the future_mercado_trends DataFrame
forecast_mercado_trends = model_mercado_trends.predict(future_mercado_trends)

# Display the first five rows of the forecast_mercado_trends DataFrame
display(forecast_mercado_trends.head(5))

# Plot the Prophet predictions for the Mercado trends data
model_mercado_trends.plot(forecast_mercado_trends)

# Set the index in the forecast_mercado_trends DataFrame to the ds datetime column
forecast_mercado_trends = forecast_mercado_trends.set_index('ds')

# View the only the yhat,yhat_lower and yhat_upper columns from the DataFrame
display(forecast_mercado_trends[['yhat', 'yhat_lower', 'yhat_upper']])

# Holoviews extension to render hvPlots in Colab
hv.extension('bokeh')

# From the forecast_mercado_trends DataFrame, use hvPlot to visualize
#  the yhat, yhat_lower, and yhat_upper columns over the last 2000 hours
forecast_mercado_trends.iloc[-2000:].hvplot.line(x='ds', y=['yhat', 'yhat_lower', 'yhat_upper'], title='Forecast Mercado Trends')

# Reset the index in the forecast_mercado_trends DataFrame
forecast_mercado_trends = forecast_mercado_trends.reset_index()

# Use the plot_components function to visualize the forecast results
# for the forecast_canada DataFrame
figures_mercado_trends = model_mercado_trends.plot_components(forecast_mercado_trends)
display(figures_mercado_trends)



# Upload the "mercado_daily_revenue.csv" file into Colab, then store in a Pandas DataFrame
# Set the "date" column as the DatetimeIndex
# Sales are quoted in millions of US dollars
from google.colab import files
uploaded = files.upload()

df_mercado_sales = pd.read_csv('mercado_daily_revenue.csv')
df_mercado_sales['date'] = pd.to_datetime(df_mercado_sales['date'])
df_mercado_sales = df_mercado_sales.set_index('date')
# Review the DataFrame
display(df_mercado_sales)

# Holoviews extension to render hvPlots in Colab
hv.extension('bokeh')

# Use hvPlot to visualize the daily sales figures
df_mercado_sales.hvplot.line(x='date',y='Daily Sales',title='mercado daily sales')

# Apply a Facebook Prophet model to the data.

# Set up the dataframe in the neccessary format:
# Reset the index so that date becomes a column in the DataFrame
mercado_sales_prophet_df = df_mercado_sales.reset_index()

# Adjust the columns names to the Prophet syntax
mercado_sales_prophet_df.columns = ['ds','y']

# Visualize the DataFrame
display(mercado_sales_prophet_df)

# Create the model
mercado_sales_prophet_model = Prophet()

# Fit the model
mercado_sales_prophet_model.fit(mercado_sales_prophet_df)

# Predict sales for 90 days (1 quarter) out into the future.

# Start by making a future dataframe
mercado_sales_prophet_future = mercado_sales_prophet_model.make_future_dataframe(periods=90)

# Display the last five rows of the future DataFrame
display(mercado_sales_prophet_future.tail(5))

# Make predictions for the sales each day over the next quarter
mercado_sales_prophet_forecast = mercado_sales_prophet_model.predict(mercado_sales_prophet_future)

# Display the first 5 rows of the resulting DataFrame
display(mercado_sales_prophet_forecast.head(5))

# Use the plot_components function to analyze seasonal patterns in the company's revenue
mercado_sales_prophet_model.plot_components(mercado_sales_prophet_forecast)

# Plot the predictions for the Mercado sales
mercado_sales_prophet_model.plot(mercado_sales_prophet_forecast)

# For the mercado_sales_prophet_forecast DataFrame, set the ds column as the DataFrame Index
mercado_sales_prophet_forecast = mercado_sales_prophet_forecast.set_index('ds')

# Display the first and last five rows of the DataFrame
display(mercado_sales_prophet_forecast.head(5))
display(mercado_sales_prophet_forecast.tail(5))

# Produce a sales forecast for the finance division
# giving them a number for expected total sales next quarter.
# Provide best case (yhat_upper), worst case (yhat_lower), and most likely (yhat) scenarios.

# Create a forecast_quarter Dataframe for the period 2020-07-01 to 2020-09-30
# The DataFrame should include the columns yhat_upper, yhat_lower, and yhat
mercado_sales_forecast_quarter = mercado_sales_prophet_forecast.loc['2020-07-01':'2020-09-30']

# Update the column names for the forecast_quarter DataFrame
# to match what the finance division is looking for
mercado_sales_forecast_quarter = mercado_sales_forecast_quarter[['yhat_upper','yhat_lower','yhat']]

# Review the last five rows of the DataFrame
display(mercado_sales_forecast_quarter.head(5))
display(mercado_sales_forecast_quarter.tail(5))

# Displayed the summed values for all the rows in the forecast_quarter DataFrame
mercado_sales_forecast_quarter_sums = mercado_sales_forecast_quarter.sum()
display(mercado_sales_forecast_quarter_sums)